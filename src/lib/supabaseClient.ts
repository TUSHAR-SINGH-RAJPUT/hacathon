import { createClient, SupabaseClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl) {
  throw new Error("Missing env.NEXT_PUBLIC_SUPABASE_URL");
}
if (!supabaseAnonKey) {
  throw new Error("Missing env.NEXT_PUBLIC_SUPABASE_ANON_KEY");
}

// Define a type for your database schema if you have one, or use `any` for now.
// Replace `any` with your actual database schema type generated from Supabase (e.g., using `supabase gen types typescript`)
// For this example, we'll assume a generic structure.
export type Database = {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string;
          created_at: string;
          name: string | null;
          address: string | null;
          location: string | null;
          email: string | null;
          phone_number: string | null;
        };
        Insert: {
          id?: string; // Usually auto-generated by Supabase auth or database
          created_at?: string;
          name: string | null;
          address: string | null;
          location: string | null;
          email: string | null;
          phone_number: string | null;
        };
        Update: {
          id?: string;
          created_at?: string;
          name?: string | null;
          address?: string | null;
          location?: string | null;
          email?: string | null;
          phone_number?: string | null;
        };
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
  };
};


export const supabase: SupabaseClient<Database> = createClient<Database>(supabaseUrl, supabaseAnonKey);
